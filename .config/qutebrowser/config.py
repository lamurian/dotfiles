# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
config.set('content.cookies.accept', 'all', 'devtools://*')

# Allow websites to share screen content.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.desktop_capture', True, 'https://meet.google.com')
config.set('content.desktop_capture', True, 'https://meet.jit.si')
config.set('content.desktop_capture', True, 'https://teams.microsoft.com')
config.set('content.desktop_capture', True, 'https://us02web.zoom.us')
config.set('content.desktop_capture', True, 'https://web.skype.com')
config.set('content.desktop_capture', True, 'https://zoom.us')

# Allow websites to request geolocations.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.geolocation', False, 'https://bpjsketenagakerjaan.go.id')
config.set('content.geolocation', False, 'https://www.bpjsketenagakerjaan.go.id')
config.set('content.geolocation', False, 'https://www.btpn.com')
config.set('content.geolocation', False, 'https://www.byu.id')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/lam/data/lamuri/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/lam/data/lamuri/qutebrowser/userscripts/*')

# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_capture', False, 'https://app.slack.com')
config.set('content.media.audio_capture', True, 'https://kemkes-go-id.zoom.us')
config.set('content.media.audio_capture', True, 'https://meet.jit.si')
config.set('content.media.audio_capture', True, 'https://teams.microsoft.com')
config.set('content.media.audio_capture', True, 'https://us02web.zoom.us')
config.set('content.media.audio_capture', True, 'https://us06web.zoom.us')
config.set('content.media.audio_capture', True, 'https://web.skype.com')
config.set('content.media.audio_capture', False, 'https://web.whatsapp.com')
config.set('content.media.audio_capture', True, 'https://who.zoom.us')
config.set('content.media.audio_capture', True, 'https://zoom.us')
config.set('content.media.audio_capture', True, 'https://meet.google.com')

# Allow websites to record audio and video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_video_capture', True, 'https://app.chime.aws')
config.set('content.media.audio_video_capture', True, 'https://kemkes-go-id.zoom.us')
config.set('content.media.audio_video_capture', True, 'https://meet.jit.si')
config.set('content.media.audio_video_capture', True, 'https://miro.com')
config.set('content.media.audio_video_capture', True, 'https://teams.microsoft.com')
config.set('content.media.audio_video_capture', True, 'https://us02web.zoom.us')
config.set('content.media.audio_video_capture', True, 'https://us06web.zoom.us')
config.set('content.media.audio_video_capture', True, 'https://web.skype.com')
config.set('content.media.audio_video_capture', True, 'https://zoom.us')
config.set('content.media.audio_video_capture', True, 'https://meet.google.com')

# Allow websites to record video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.video_capture', True, 'https://kemkes-go-id.zoom.us')
config.set('content.media.video_capture', True, 'https://meet.jit.si')
config.set('content.media.video_capture', True, 'https://teams.microsoft.com')
config.set('content.media.video_capture', True, 'https://ujiansimak.ui.ac.id')
config.set('content.media.video_capture', True, 'https://us02web.zoom.us')
config.set('content.media.video_capture', True, 'https://web.skype.com')
config.set('content.media.video_capture', False, 'https://web.whatsapp.com')
config.set('content.media.video_capture', True, 'https://zoom.us')
config.set('content.media.video_capture', True, 'https://meet.google.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://app.element.io')
config.set('content.notifications.enabled', True, 'https://app.slack.com')
config.set('content.notifications.enabled', True, 'https://business.facebook.com')
config.set('content.notifications.enabled', True, 'https://chat.zulip.org')
config.set('content.notifications.enabled', True, 'https://discourse.openehr.org')
config.set('content.notifications.enabled', True, 'https://mail.google.com')
config.set('content.notifications.enabled', True, 'https://medistree.zulipchat.com')
config.set('content.notifications.enabled', True, 'https://medtech-imeri.zulipchat.com')
config.set('content.notifications.enabled', False, 'https://calendar.google.com')
config.set('content.notifications.enabled', True, 'https://meet.google.com')
config.set('content.notifications.enabled', False, 'https://web.telegram.org')
config.set('content.notifications.enabled', True, 'https://web.whatsapp.com')

# Display PDF files via PDF.js in the browser without showing a download
# prompt. Note that the files can still be downloaded by clicking the
# download button in the pdf.js viewer. With this set to `false`, the
# `:prompt-open-download --pdfjs` command (bound to `<Ctrl-p>` by
# default) can be used in the download prompt.
# Type: Bool
c.content.pdfjs = True

# Proxy to use. In addition to the listed values, you can use a
# `socks://...` or `http://...` URL. Note that with QtWebEngine, it will
# take a couple of seconds until the change is applied, if this value is
# changed at runtime. Authentication for SOCKS proxies isn't supported
# due to Chromium limitations.
# Type: Proxy
# Valid values:
#   - system: Use the system wide proxy.
#   - none: Don't use any proxy
c.content.proxy = 'system'

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', False, 'https://calendar.google.com?cid=%25s')
config.set('content.register_protocol_handler', True, 'https://mail.google.com?extsrc=mailto&url=%25s')

# List of user stylesheet filenames to use.
# Type: List of File, or File
c.content.user_stylesheets = []

# Duration (in milliseconds) to wait before removing finished downloads.
# If set to -1, downloads are never removed.
# Type: Int
c.downloads.remove_finished = 100

# Handler for selecting file(s) in forms. If `external`, then the
# commands specified by `fileselect.single_file.command`,
# `fileselect.multiple_files.command` and `fileselect.folder.command`
# are used to select one file, multiple files, and folders,
# respectively.
# Type: String
# Valid values:
#   - default: Use the default file selector.
#   - external: Use an external command.
c.fileselect.handler = 'external'

# Command (and arguments) to use for selecting a single file in forms.
# The command should write the selected file path to the specified file
# or stdout. The following placeholders are defined: * `{}`: Filename of
# the file to be written to. If not contained in any argument, the
# standard output of the command is read instead.
# Type: ShellCommand
c.fileselect.single_file.command = ['st', '-e', 'ranger', '--choosefile={}']

# Command (and arguments) to use for selecting multiple files in forms.
# The command should write the selected file paths to the specified file
# or to stdout, separated by newlines. The following placeholders are
# defined: * `{}`: Filename of the file to be written to. If not
# contained in any argument, the   standard output of the command is
# read instead.
# Type: ShellCommand
c.fileselect.multiple_files.command = ['st', '-e', 'ranger', '--choosefiles={}']

# Command (and arguments) to use for selecting a single folder in forms.
# The command should write the selected folder path to the specified
# file or stdout. The following placeholders are defined: * `{}`:
# Filename of the file to be written to. If not contained in any
# argument, the   standard output of the command is read instead.
# Type: ShellCommand
c.fileselect.folder.command = ['st', '-e', 'ranger', '--choosedir={}']

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True

# Scaling factor for favicons in the tab bar. The tab size is unchanged,
# so big favicons also require extra `tabs.padding`.
# Type: Float
c.tabs.favicons.scale = 0.75

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'top'

# Which tab to select when the focused tab is removed.
# Type: SelectOnRemove
# Valid values:
#   - prev: Select the tab which came before the closed one (left in horizontal, above in vertical).
#   - next: Select the tab which came after the closed one (right in horizontal, below in vertical).
#   - last-used: Select the previously selected tab.
c.tabs.select_on_remove = 'next'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'multiple'

# Alignment of the text inside of tabs.
# Type: TextAlignment
# Valid values:
#   - left
#   - right
#   - center
c.tabs.title.alignment = 'center'

# Width (in pixels) of the progress indicator (0 to disable).
# Type: Int
c.tabs.indicator.width = 2

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'about:blank'

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'about:blank'

# Hide the window decoration.  This setting requires a restart on
# Wayland.
# Type: Bool
c.window.hide_decoration = False

# Default zoom level.
# Type: Perc
c.zoom.default = '90%'

## COLORS

c.colors.completion.fg = '#e5e9f0'
c.colors.completion.odd.bg = '#2e3440'
c.colors.completion.even.bg = '#2e3440'
c.colors.completion.category.fg = '#81a1c1'
c.colors.completion.category.bg = '#2e3440'
c.colors.completion.category.border.top = '#2e3440'
c.colors.completion.category.border.bottom = '#2e3440'
c.colors.completion.item.selected.fg = '#e5e9f0'
c.colors.completion.item.selected.bg = '#434c5e'
c.colors.completion.item.selected.border.top = '#434c5e'
c.colors.completion.item.selected.border.bottom = '#434c5e'
c.colors.completion.item.selected.match.fg = '#e5e9f0'
c.colors.completion.match.fg = '#d08770'
c.colors.completion.scrollbar.fg = '#e5e9f0'
c.colors.completion.scrollbar.bg = '#2e3440'

c.colors.contextmenu.menu.bg = '#2e3440'
c.colors.contextmenu.menu.fg = '#e5e9f0'
c.colors.contextmenu.selected.bg = '#434c5e'
c.colors.contextmenu.selected.fg = '#e5e9f0'
c.colors.contextmenu.disabled.bg = '#3b4252'
c.colors.contextmenu.disabled.fg = '#d8dee9'

c.colors.downloads.bar.bg = '#2e3440'
c.colors.downloads.start.fg = '#2e3440'
c.colors.downloads.start.bg = '#81a1c1'
c.colors.downloads.stop.fg = '#2e3440'
c.colors.downloads.stop.bg = '#88c0d0'
c.colors.downloads.error.fg = '#bf616a'

c.colors.hints.fg = '#2e3440'
c.colors.hints.bg = '#ebcb8b'
c.colors.hints.match.fg = '#e5e9f0'

c.colors.keyhint.fg = '#e5e9f0'
c.colors.keyhint.suffix.fg = '#e5e9f0'
c.colors.keyhint.bg = '#2e3440'

c.colors.messages.error.fg = '#2e3440'
c.colors.messages.error.bg = '#bf616a'
c.colors.messages.error.border = '#bf616a'
c.colors.messages.warning.fg = '#2e3440'
c.colors.messages.warning.bg = '#b48ead'
c.colors.messages.warning.border = '#b48ead'
c.colors.messages.info.fg = '#e5e9f0'
c.colors.messages.info.bg = '#2e3440'
c.colors.messages.info.border = '#2e3440'

c.colors.prompts.fg = '#e5e9f0'
c.colors.prompts.border = '#2e3440'
c.colors.prompts.bg = '#2e3440'
c.colors.prompts.selected.fg = '#e5e9f0'
c.colors.prompts.selected.bg = '#434c5e'

c.colors.statusbar.normal.fg = '#e5e9f0'
c.colors.statusbar.normal.bg = '#2e3440'
c.colors.statusbar.insert.fg = '#88c0d0'
c.colors.statusbar.insert.bg = '#2e3440'
c.colors.statusbar.passthrough.fg = '#ebcb8b'
c.colors.statusbar.passthrough.bg = '#2e3440'
c.colors.statusbar.private.fg = '#b48ead'
c.colors.statusbar.private.bg = '#2e3440'
c.colors.statusbar.command.fg = '#d8dee9'
c.colors.statusbar.command.bg = '#3b4252'
c.colors.statusbar.command.private.fg = '#b48ead'
c.colors.statusbar.command.private.bg = '#3b4252' # Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.caret.fg = '#81a1c1' # Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = '#2e3440'
c.colors.statusbar.caret.selection.fg = '#81a1c1'
c.colors.statusbar.caret.selection.bg = '#2e3440'
c.colors.statusbar.progress.bg = '#81a1c1'
c.colors.statusbar.url.fg = '#e5e9f0'
c.colors.statusbar.url.error.fg = '#bf616a'
c.colors.statusbar.url.hover.fg = '#d08770'
c.colors.statusbar.url.success.http.fg = '#a3be8c'
c.colors.statusbar.url.success.https.fg = '#a3be8c'
c.colors.statusbar.url.warn.fg = '#b48ead'

c.colors.tabs.bar.bg = '#2e3440'
c.colors.tabs.indicator.start = '#81a1c1'
c.colors.tabs.indicator.stop = '#88c0d0'
c.colors.tabs.indicator.error = '#bf616a'
c.colors.tabs.odd.fg = '#e5e9f0'
c.colors.tabs.odd.bg = '#2e3440'
c.colors.tabs.even.fg = '#e5e9f0'
c.colors.tabs.even.bg = '#2e3440'
c.colors.tabs.selected.odd.fg = '#e5e9f0'
c.colors.tabs.selected.odd.bg = '#434c5e'
c.colors.tabs.selected.even.fg = '#e5e9f0'
c.colors.tabs.selected.even.bg = '#434c5e'
c.colors.tabs.pinned.odd.fg = '#2e3440'
c.colors.tabs.pinned.odd.bg = '#a3be8c'
c.colors.tabs.pinned.even.fg = '#2e3440'
c.colors.tabs.pinned.even.bg = '#a3be8c'
c.colors.tabs.pinned.selected.odd.fg = '#e5e9f0'
c.colors.tabs.pinned.selected.odd.bg = '#434c5e'
c.colors.tabs.pinned.selected.even.fg = '#e5e9f0'
c.colors.tabs.pinned.selected.even.bg = '#434c5e'

c.colors.webpage.bg = '#2e3440'

# Value to use for `prefers-color-scheme:` for websites. The "light"
# value is only available with QtWebEngine 5.15.2+. On older versions,
# it is the same as "auto". The "auto" value is broken on QtWebEngine
# 5.15.2 due to a Qt bug. There, it will fall back to "light"
# unconditionally.
# Type: String
# Valid values:
#   - auto: Use the system-wide color scheme setting.
#   - light: Force a light theme.
#   - dark: Force a dark theme.
c.colors.webpage.preferred_color_scheme = 'dark'

# Render all web contents using a dark theme. Example configurations
# from Chromium's `chrome://flags`: - "With simple HSL/CIELAB/RGB-based
# inversion": Set   `colors.webpage.darkmode.algorithm` accordingly, and
# set `colors.webpage.darkmode.policy.images` to `never`.  - "With
# selective image inversion": qutebrowser default settings.
# Type: Bool
c.colors.webpage.darkmode.enabled = False

# Which algorithm to use for modifying how colors are rendered with
# darkmode. The `lightness-cielab` value was added with QtWebEngine 5.14
# and is treated like `lightness-hsl` with older QtWebEngine versions.
# Type: String
# Valid values:
#   - lightness-cielab: Modify colors by converting them to CIELAB color space and inverting the L value. Not available with Qt < 5.14.
#   - lightness-hsl: Modify colors by converting them to the HSL color space and inverting the lightness (i.e. the "L" in HSL).
#   - brightness-rgb: Modify colors by subtracting each of r, g, and b from their maximum value.
c.colors.webpage.darkmode.algorithm = 'lightness-cielab'

# Contrast for dark mode. This only has an effect when
# `colors.webpage.darkmode.algorithm` is set to `lightness-hsl` or
# `brightness-rgb`.
# Type: Float
c.colors.webpage.darkmode.contrast = 1.0

# Threshold for inverting text with dark mode. Text colors with
# brightness below this threshold will be inverted, and above it will be
# left as in the original, non-dark-mode page. Set to 256 to always
# invert text color or to 0 to never invert text color.
# Type: Int
c.colors.webpage.darkmode.threshold.foreground = 200

# Threshold for inverting background elements with dark mode. Background
# elements with brightness above this threshold will be inverted, and
# below it will be left as in the original, non-dark-mode page. Set to
# 256 to never invert the color or to 0 to always invert it. Note: This
# behavior is the opposite of
# `colors.webpage.darkmode.threshold.foreground`!
# Type: Int
c.colors.webpage.darkmode.threshold.background = 200

# Map keys to other keys, so that they are equivalent in all modes. When
# the key used as dictionary-key is pressed, the binding for the key
# used as dictionary-value is invoked instead. This is useful for global
# remappings of keys, for example to map <Ctrl-[> to <Escape>. NOTE:
# This should only be used if two keys should always be equivalent, i.e.
# for things like <Enter> (keypad) and <Return> (non-keypad). For normal
# command bindings, qutebrowser works differently to vim: You always
# bind keys to commands, usually via `:bind` or `config.bind()`. Instead
# of using this setting, consider finding the command a key is bound to
# (e.g. via `:bind gg`) and then binding the same command to the desired
# key. Note that when a key is bound (via `bindings.default` or
# `bindings.commands`), the mapping is ignored.
# Type: Dict
c.bindings.key_mappings = {'<Ctrl+6>': '<Ctrl+^>', '<Ctrl+Enter>': '<Ctrl+Return>', '<Ctrl+j>': '<Return>', '<Ctrl+m>': '<Return>', '<Ctrl+[>': '<Escape>', '<Enter>': '<Return>', '<Shift+Enter>': '<Return>', '<Shift+Return>': '<Return>'}

# Bindings for normal mode
config.bind(',M', 'hint links spawn --detach mpv {hint-url}')
config.bind(',m', 'hint links spawn --detach umpv {hint-url}')
config.bind('<', ':tab-move -')
config.bind('>', ':tab-move +')
config.bind('h', 'scroll-px -70 0')
config.bind('j', 'scroll-px 0 50')
config.bind('k', 'scroll-px 0 -50')
config.bind('l', 'scroll-px 70 0')
config.bind('sD', ":set content.user_stylesheets ''")
config.bind('sd', ':set content.user_stylesheets /home/lam/.config/qutebrowser/userstyle/gruvbox.css')
config.bind('tj', 'tab-next')
config.bind('tk', 'tab-prev')
